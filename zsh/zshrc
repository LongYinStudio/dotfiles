# # Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc. Initialization code that may require console input (password prompts, [y/n]
# # confirmations, etc.) must go above this block; everything else may go below.
# if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#   source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
# fi
# # 主题(random随机主题(echo $RANDOM_THEME查看随机主题名称)) # See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# # 范围随机主题 ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )
# ZSH_THEME="powerlevel10k/powerlevel10k" # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
# [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

ZSH_DISABLE_COMPFIX="true" # 有的版本有引号， 有的版本无引号，自己尝试
export TERM='xterm-256color'
export HISTSIZE=10000     #历史纪录条目数量
export SAVEHIST=10000     #注销后保存的历史纪录条目数量
setopt INC_APPEND_HISTORY #以附加的方式写入历史纪录
setopt HIST_IGNORE_DUPS   #如果连续输入的命令相同，历史纪录中只保留一个
# export HISTORY_IGNORE="(ls|cd|pwd|exit|sudo reboot|history|cd -|cd ..)"
# export SUDO_PROMPT="Deploying root access for %u. Password pls: "
# export BROWSER='firefox'
command -v nvim >/dev/null 2>&1 && export EDITOR=nvim || export EDITOR=vim
export ZSH="$HOME/.oh-my-zsh" # oh-my-zsh安装目录
# export HISTORY_IGNORE="(ls|cd|pwd|exit|sudo reboot|history|cd -|cd ..)"
# umask 0077 #修改umask值

# 移除 tmux (没什么用，自己alias就好) z (由zoxide代替)
# 各插件(git aliases) 命令高亮 命令补全 双击esc->sudo x解压 命令没安装，显示如何安装 命令行vim fzf-tab 压缩集合，使用ua+压缩后缀(如:tar.gz、zip等等)+压缩对象
plugins=(git zsh-syntax-highlighting zsh-autosuggestions sudo extract command-not-found vi-mode fzf-tab universalarchive)

source "$ZSH"/oh-my-zsh.sh
# export MANPATH="/usr/local/man:$MANPATH" # User configuration

# alias 别名 run "alias"可以查看系统，插件，主题等等所有别名
[[ $(command -v trash) ]] && alias rm="trash"
alias pacmanlist="LC_ALL=C pacman -Qi | awk '/^Name/{name=$3} /^Installed Size/{print $4$5, name}' | sort -h" # 列出已安软件及大小
alias \
  apti="sudo apt install" \
  aptp="sudo apt purge" \
  aptar="sudo apt autoremove" \
  apts="apt search"
alias zshconfig="vim ~/.zshrc"
alias ..="cd .." ...="cd ../.." ....="cd ../../.." .....="cd ../../../.."
alias ~="cd ~"
alias q="exit"
alias c="clear"
alias ip="ip -color"
if [[ "$(uname)" == "Linux" ]]; then
    alias o='xdg-open'
elif [[ "$(uname)" == "Darwin" ]]; then
    alias o='open'
    alias xvim="arch -x86_64 nvim"
fi
if command -v eza &>/dev/null; then # 使用eza替代exa，因为eza基于rust且更新频繁
	alias ls="eza --icons"
	alias ll="eza -lah --icons"
	alias lt="eza --tree --long --icons -I 'node_modules|.git'"
fi
[[ $(command -v bat) ]] && alias cat="bat"
alias lg="lazygit"
alias p="pnpm"
command -v nvim >/dev/null && alias v="nvim" vi="nvim" vdiff="nvim -d"
alias lv="NVIM_APPNAME=LazyVim nvim"   # git clone https://github.com/LazyVim/starter ~/.config/LazyVim
alias nv="NVIM_APPNAME=NvChad nvim"    # git clone https://github.com/NvChad/starter ~/.config/NvChad
alias av="NVIM_APPNAME=AstroNvim nvim" # git clone --depth 1 https://github.com/AstroNvim/template ~/.config/AstroNvim
alias kcat="kitty +kitten icat" # 依赖于 ImageMagick
alias wcat="wezterm imgcat"
alias ipv4="curl -4 ip.sb" ipv6="curl -6 ip.sb"
alias trans_en_zh='trans -j -d en:zh' trans_zh_en='trans -j -d zh:en'

# path 环境变量 node 使用的fnm
source "/etc/environment"
source "$HOME/.cargo/env"
bin="$HOME/bin"
go="$HOME/dev-tools/go/bin"
mysql="/usr/local/mysql/bin" # mac dmg安装的mysql
export JAVA_HOME=$HOME/dev-tools/jdk1.8.0_421
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
export JRE_HOME=$JAVA_HOME/jre

export PATH="$JAVA_HOME/bin:$bin:$go:$mysql:$PATH"

# export NVM_DIR="$HOME/.nvm"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm
# [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion
# # place this after nvm initialization!
# autoload -U add-zsh-hook
# load-nvmrc() {
# 	local node_version="$(nvm version)"
# 	local nvmrc_path="$(nvm_find_nvmrc)"
# 	if [ -n "$nvmrc_path" ]; then
# 		local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")
# 		if [ "$nvmrc_node_version" = "N/A" ]; then
# 			nvm install
# 		elif [ "$nvmrc_node_version" != "$node_version" ]; then
# 			nvm use
# 		fi
# 	elif [ "$node_version" != "$(nvm version default)" ]; then
# 		echo "Reverting to nvm default version"
# 		nvm use default
# 	fi
# }
# add-zsh-hook chpwd load-nvmrc
# load-nvmrc
# 换用fnm
# curl -fsSL https://fnm.vercel.app/install | bash -s -- --install-dir "$HOME/.fnm" --skip-shell
export FNM_NODE_DIST_MIRROR=https://mirrors.bfsu.edu.cn/nodejs-release/
export PATH="$HOME/.fnm:$PATH"
eval "$(fnm env --use-on-cd)"
#rustup
export RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup
export RUSTUP_UPDATE_ROOT=https://mirrors.tuna.tsinghua.edu.cn/rustup/rustup

# 开启代理函数
PROXY_HTTP="http://127.0.0.1:7890"
function openvpn() {
	export http_proxy="${PROXY_HTTP}"
	export https_proxy="${PROXY_HTTP}"
	export all_proxy=socks5://127.0.0.1:7890
	git config --global http.proxy "${PROXY_HTTP}"
	git config --global https.proxy "${PROXY_HTTP}"
	echo "代理已开"
}

# 关闭代理函数
function closevpn() {
	unset https_proxy
	unset http_proxy
	unset all_proxy
	git config --global --unset http.proxy
	git config --global --unset https.proxy
	echo "代理已关"
}

# 编辑模式下，使用Ctrl+v，使用nvim(默认编辑器)编辑当前命令
bindkey -v # 键盘绑定模式设置为viins模式
autoload -Uz edit-command-line
zle -N edit-command-line
bindkey -M viins '^v' edit-command-line

# FZF
[[ -f "$HOME/.fzf.zsh" ]] && source "$HOME/.fzf.zsh"
export FZF_DEFAULT_OPTS=" \
  --color=bg+:#313244,bg:#1e1e2e,spinner:#f5e0dc,hl:#f38ba8 \
  --color=fg:#cdd6f4,header:#f38ba8,info:#cba6f7,pointer:#f5e0dc \
  --color=marker:#f5e0dc,fg+:#cdd6f4,prompt:#cba6f7,hl+:#f38ba8"
export FZF_DEFAULT_COMMAND="fd --exclude={.git,.idea,.vscode,.sass-cache,node_modules,build,dist,vendor} --type f"
if command -v fzf &>/dev/null; then
	source <(fzf --zsh) # Set up fzf key bindings and fuzzy completion (版本0.54以上)
	alias fv='vim $(fzf)'
	alias fn='nvim $(fzf)'
	alias fp="fzf --preview 'bat --color=always {}'"
	alias fh='history | fzf'
fi

# Completion styling
# source ~/.oh-my-zsh/custom/plugins/fzf-tab/fzf-tab.zsh
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}' # 补全不区分大小写
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no
zstyle ':fzf-tab:*' fzf-command fzf
zstyle ':fzf-tab:*' prefix ''
zstyle ':fzf-tab:*' fzf-bindings 'space:accept' # 使用 Ctrl-Space 直接确认选中项（避免回车）
zstyle ':fzf-tab:*' switch-group '<' '>'
zstyle ':fzf-tab:*' use-fzf-default-opts yes
# zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup  # 使用 tmux 弹窗
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'eza -1 --color=always --icons $realpath || ls -l $realpath'
zstyle ':fzf-tab:complete:__zoxide_z:*' fzf-preview 'eza -1 --color=always --icons $realpath || ls -l $realpath'
zstyle ':fzf-tab:complete:nvim:*' fzf-preview 'bat --color=always --style=numbers $realpath 2>/dev/null || cat $realpath'
zstyle ':completion:*:git-checkout:*' fzf-preview 'git log --oneline --graph --color=always -n 20 $(echo {+1} | sed "s/^origin\///")'
zstyle ':fzf-tab:complete:git-(diff|restore):*' fzf-preview 'git diff $word | delta'
zstyle ':completion:*:ssh:*' fzf-preview 'grep -i "^Host ${word}" ~/.ssh/config | sed "s/Host //"; host ${word}'
zstyle ':fzf-tab:complete:tldr:argument-1' fzf-preview 'tldr --color always $word'
# format='bat --color=always -plyaml <(%s -Qi $word 2>/dev/null || %s -Si $word)'
# zstyle ':fzf-tab:complete:pacman:*' fzf-preview $(printf "$format" 'pacman' 'pacman')
# zstyle ':fzf-tab:complete:yay:*' fzf-preview $(printf "$format" 'yay' 'yay')
# zstyle ':fzf-tab:complete:paru:*' fzf-preview $(printf "$format" 'paru' 'paru')
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':fzf-tab:complete:(kill|ps):argument-rest' fzf-preview '[[ "$group" == *"process ID"* ]] && ps --pid=$word -o cmd --no-headers -w -w'
zstyle ':fzf-tab:complete:(kill|ps):argument-rest' fzf-flags --preview-window=down:3:wrap
zstyle ':fzf-tab:complete:(\\|*/|)man:*' fzf-preview 'man $word'
zstyle ':completion:*' file-patterns \
  'local-files:files:local *' \
  'remote-files:files:remote *'
# 缓存耗时补全（如大型项目文件列表）
zstyle ':completion:*' use-cache yes
zstyle ':completion:*' cache-path ~/.zsh/cache

# homebrew
if command -v brew &>/dev/null; then
	export HOMEBREW_INSTALL_FROM_API=1
	export HOMEBREW_API_DOMAIN="https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api"
	export HOMEBREW_BOTTLE_DOMAIN="https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles"
	export HOMEBREW_BREW_GIT_REMOTE="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git"
	export HOMEBREW_CORE_GIT_REMOTE="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git"
fi

# starship 不需要source .zshrc,随便输个命令,就会重新加载配置
[[ $(command -v starship) ]] &&	eval "$(starship init zsh)"
[[ $(command -v zoxide) ]] && eval "$(zoxide init zsh)"
